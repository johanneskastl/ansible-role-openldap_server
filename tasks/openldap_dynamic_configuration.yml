---
# openldap_server/tasks/openldap_dynamic_configuration.yml

#
# Make sure all necessary schemas are imported/present
#

- name: 'Create necessary schemas'
  command:
    cmd: "ldapadd -Q -Y EXTERNAL -H ldapi:/// -f {{ path_to_openldap_etc_directory }}schema/{{ item.source }}"
    creates: "{{ path_to_openldap_etc_directory }}slapd.d/cn=config/cn=schema/{{ item.target }}"
  loop:
    - source: 'core.ldif'
      target: 'cn={0}core.ldif'
    - source: 'cosine.ldif'
      target: 'cn={1}cosine.ldif'
    - source: 'nis.ldif'
      target: 'cn={2}nis.ldif'
    - source: 'inetorgperson.ldif'
      target: 'cn={3}inetorgperson.ldif'
  tags:
    - 'configuration'

#
# Create directory /root/OpenLDAP_configuration_via_ansible/
#

- name: 'Create directory /root/OpenLDAP_configuration_via_ansible/'
  file:
    path: '/root/OpenLDAP_configuration_via_ansible/'
    state: 'directory'
    owner: 'root'
    group: 'root'
    mode: '0700'
  notify:
    - 'Fix permissions on database files'
    - 'Restart the OpenLDAP server service'

#
# Set olcRootPW for olcDatabase={0}config,cn=config
#

- name: 'Create LDIF file to set olcRootPW'
  template:
    src: 'rootDN_password_hash.ldif.j2'
    dest: '/root/OpenLDAP_configuration_via_ansible/rootDN_password_hash.ldif'
    owner: 'root'
    group: 'root'
    mode: '0600'

- name: 'Check if olcRootPW is present'
  command:
    # we really grep for the base64-encoded hash
    cmd: "grep 'olcRootPW:: {{ password_hash_base64_rootdn }}' {{ path_to_openldap_etc_directory }}slapd.d/cn=config/olcDatabase={0}config.ldif"
  register: grep_for_olcRootPW
  check_mode: 'false'
  changed_when: 'grep_for_olcRootPW.rc == 1 and grep_for_olcRootPW.stdout == ""'
  failed_when: 'grep_for_olcRootPW.rc != 0 and grep_for_olcRootPW.stdout != ""'
  # do not show the output when using ansible-playbook --diff
  no_log: 'true'

- name: 'Set olcRootPW via ldapmodify'
  command:
    cmd: 'ldapmodify -Q -Y EXTERNAL -H ldapi:/// -f /root/OpenLDAP_configuration_via_ansible/rootDN_password_hash.ldif'
  when: 'grep_for_olcRootPW.stdout == ""'
  tags:
    - 'configuration'

#
# Set the loglevel in olcDatabase={0}config,cn=config
#

- name: 'Set olcLogLevel'
  ldap_attr:
    dn: 'cn=config'
    name: 'olcLogLevel'
    values: "{{ slapd_loglevel }}"
  tags:
    - 'configuration'

#
# Set frontend ACLs
#

- name: 'Set basic frontend ACLs'
  ldap_attr:
    dn: 'olcDatabase={-1}frontend,cn=config'
    name: 'olcAccess'
    values: "{{ item }}"
  loop:
    - '{0}to * by dn.exact=gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth manage by * break'
    - '{1}to dn.exact="" by * read'
    - '{2}to dn.base="cn=Subschema" by * read'
  when:
    - 'add_frontend_acls | bool'
  tags:
    - 'configuration'

- name: 'Set additional frontend ACLs'
  ldap_attr:
    dn: 'olcDatabase={-1}frontend,cn=config'
    name: 'olcAccess'
    values: "{{ item }}"
  loop:
    - '{3}to attrs=userPassword by self write by anonymous auth by users none'
    - '{4}to attrs=shadowLastChange by self write by * read'
  when:
    - 'add_frontend_acls | bool'
    - 'add_frontend_acls_protect_attrs | bool'
  tags:
    - 'configuration'

- name: 'Set frontend ACL to allow UNLIMITED READ ACCESS'
  ldap_attr:
    dn: 'olcDatabase={-1}frontend,cn=config'
    name: 'olcAccess'
    values: '{5}to * by * read'
  when:
    - 'add_frontend_acls | bool'
    - 'add_frontend_acls_protect_attrs | bool'
    - 'add_frontend_acls_allow_read | bool'
  tags:
    - 'configuration'
