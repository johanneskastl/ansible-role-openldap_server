---
# openldap_server/tasks/openldap_dynamic_configuration.yml

#
# Make sure all necessary schemas are imported/present
#

- name: 'Create necessary schemas'
  command:
    cmd: "ldapadd -Q -Y EXTERNAL -H ldapi:/// -f {{ path_to_openldap_etc_directory }}schema/{{ item.source }}"
    creates: "{{ path_to_openldap_etc_directory }}slapd.d/cn=config/cn=schema/{{ item.target }}"
  loop:
    - source: 'core.ldif'
      target: 'cn={0}core.ldif'
    - source: 'cosine.ldif'
      target: 'cn={1}cosine.ldif'
    - source: 'nis.ldif'
      target: 'cn={2}nis.ldif'
    - source: 'inetorgperson.ldif'
      target: 'cn={3}inetorgperson.ldif'
  tags:
    - 'configuration'

#
# Set olcRootDN for olcDatabase={0}config,cn=config
#

- name: 'Set olcRootDN for olcDatabase={0}config,cn=config'
  ldap_attr:
    dn: 'olcDatabase={0}config,cn=config'
    name: 'olcRootDN'
    values: 'cn=admin,cn=config'
  ignore_errors: "{{ ignore_errors_additional_packages }}"
  tags:
    - 'configuration'

#
# Set olcRootPW for olcDatabase={0}config,cn=config
#

- name: 'Set olcRootPW for olcDatabase={0}config,cn=config'
  ldap_attr:
    dn: 'olcDatabase={0}config,cn=config'
    name: 'olcRootPW'
    values: "{{ password_hash_rootdn }}"
    state: 'exact'
  # do not show output when using ansible-playbook --diff
  no_log: 'true'
  ignore_errors: "{{ ignore_errors_additional_packages }}"
  when: 'password_hash_rootdn is defined'
  tags:
    - 'configuration'

#
# Set the loglevel in olcDatabase={0}config,cn=config
#

- name: 'Set olcLogLevel in olcDatabase={0}config,cn=config'
  ldap_attr:
    dn: 'cn=config'
    name: 'olcLogLevel'
    values: "{{ slapd_loglevel }}"
  ignore_errors: "{{ ignore_errors_additional_packages }}"
  tags:
    - 'configuration'

#
# Set olcRootDN for olcDatabase={2}mdb,cn=config
#

- name: 'Set olcRootDN for olcDatabase={2}mdb,cn=config'
  ldap_attr:
    dn: 'olcDatabase={2}mdb,cn=config'
    name: 'olcRootDN'
    values: "{{ root_dn }},{{ base_dn }}"
  ignore_errors: "{{ ignore_errors_additional_packages }}"
  when: 'password_hash_database_rootdn is defined or password_hash_rootdn is defined'
  tags:
    - 'configuration'

#
# Set olcRootPW for olcDatabase={2}mdb,cn=config
#

- name: 'Set olcRootPW for olcDatabase={2}mdb,cn=config'
  ldap_attr:
    dn: 'olcDatabase={2}mdb,cn=config'
    name: 'olcRootPW'
    values: "{{ password_hash_database_rootdn | default(password_hash_rootdn) }}"
    state: 'exact'
  # do not show output when using ansible-playbook --diff
  no_log: 'true'
  ignore_errors: "{{ ignore_errors_additional_packages }}"
  when: 'password_hash_database_rootdn is defined or password_hash_rootdn is defined'
  tags:
    - 'configuration'

#
# Set frontend ACLs
#

- name: 'Set basic frontend ACLs'
  ldap_attr:
    dn: 'olcDatabase={-1}frontend,cn=config'
    name: 'olcAccess'
    values: "{{ item }}"
  loop:
    - '{0}to * by dn.exact=gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth manage by * break'
    - '{1}to dn.exact="" by * read'
    - '{2}to dn.base="cn=Subschema" by * read'
  ignore_errors: "{{ ignore_errors_additional_packages }}"
  when:
    - 'add_frontend_acls | bool'
  tags:
    - 'configuration'

- name: 'Set additional frontend ACLs'
  ldap_attr:
    dn: 'olcDatabase={-1}frontend,cn=config'
    name: 'olcAccess'
    values: "{{ item }}"
  loop:
    - '{3}to attrs=userPassword by self write by anonymous auth by users none'
    - '{4}to attrs=shadowLastChange by self write by * read'
  ignore_errors: "{{ ignore_errors_additional_packages }}"
  when:
    - 'add_frontend_acls | bool'
    - 'add_frontend_acls_protect_attrs | bool'
  tags:
    - 'configuration'

- name: 'Set frontend ACL to allow UNLIMITED READ ACCESS'
  ldap_attr:
    dn: 'olcDatabase={-1}frontend,cn=config'
    name: 'olcAccess'
    values: '{5}to * by * read'
  ignore_errors: "{{ ignore_errors_additional_packages }}"
  when:
    - 'add_frontend_acls | bool'
    - 'add_frontend_acls_protect_attrs | bool'
    - 'add_frontend_acls_allow_read | bool'
  tags:
    - 'configuration'

#
# Set frontend ACLs
#
- name: 'Set frontend ACL to allow UNLIMITED READ ACCESS'
  ldap_attr:
    dn: 'olcDatabase={-1}frontend,cn=config'
    name: 'olcAccess'
    values: '{5}to * by * read'
    state: 'absent'
  ignore_errors: "{{ ignore_errors_additional_packages }}"
  when: '
    not add_frontend_acls | bool
    or not add_frontend_acls_protect_attrs | bool
    or not add_frontend_acls_allow_read | bool
    '
  tags:
    - 'configuration'

- name: 'Set additional frontend ACLs'
  ldap_attr:
    dn: 'olcDatabase={-1}frontend,cn=config'
    name: 'olcAccess'
    values: "{{ item }}"
    state: 'absent'
  loop:
    - '{4}to attrs=shadowLastChange by self write by * read'
    - '{3}to attrs=userPassword by self write by anonymous auth by users none'
  ignore_errors: "{{ ignore_errors_additional_packages }}"
  when: '
    not add_frontend_acls | bool
    or not add_frontend_acls_protect_attrs | bool
    '
  tags:
    - 'configuration'

- name: 'Remove the basic frontend ACLs'
  ldap_attr:
    dn: 'olcDatabase={-1}frontend,cn=config'
    name: 'olcAccess'
    values: "{{ item }}"
    state: 'absent'
  loop:
    - '{2}to dn.base="cn=Subschema" by * read'
    - '{1}to dn.exact="" by * read'
    - '{0}to * by dn.exact=gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth manage by * break'
  ignore_errors: "{{ ignore_errors_additional_packages }}"
  when:
    - 'not add_frontend_acls | bool'
  tags:
    - 'configuration'
